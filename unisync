#!/bin/bash

# Unison bash wrapper
# Copyright (C) 2012  Vyacheslav Levit

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

ssh_socket="$HOME/.ssh/ssh-socket-unison-$$"

function info
{
    echo ":: $@" >&2
}

function error
{
    echo "Error: $@" >&2
}


# source config file, may exit
function source_config
{
    if [[ -z "$UNISYNCRC" ]] ; then
        UNISYNCRC="$HOME"/.unisyncrc
    fi

    if [[ -r "$UNISYNCRC" ]] ; then
        source "$UNISYNCRC"
    else
        error "problem reading $UNISYNCRC"
        exit 1
    fi
}


# unset all variables set in the config file
function unset_config
{
    unset location ssh_master summary unison_args locations remotes unison_dirs \
        collision_log collision_notify
    for p in "${!profile_@}" ; do unset "$p" ; done
    for l in "${!local_@}" ; do unset "$l" ; done
    for r in "${!remote_@}" ; do unset "$r" ; done
    for a in "${!args_@}" ; do unset "$a" ; done
}


function usage
{
    echo "         $(basename $0) -l|-g|-d|-h"
    echo "         $(basename $0) [-d] [profile|group] [unison_args]"

    echo
    echo "If no profile and/or group specified, all available profiles will be synced."

    echo
    echo "OPTIONS:"
    echo "-l, --list     List all available profiles"
    echo "-g, --groups   List all available groups"
    echo "-d, --dry-run  Do not run unison, only print messages"
    echo "-h, --help     Show help message"

    echo
    echo "ENVIRONMENT:"
    echo "If UNISYNCRC is set, its value is used as the name of the"\
         "configuration file to source. If it is not set, ~/.unisyncrc"\
         "is used instead."

}


# check if the first argument is equal to at least one of the remaining arguments
function is_one_of
{
    local first="$1"
    shift
    for el; do
        if [[ "$el" == "$first" ]] ; then
            return 0
        fi
    done
    return 1
}


# delete log contents if the log already exists
function erase_log
{
    [[ -n "$collision_log" && -e "$collision_log" ]] && > "$collision_log"
}


# set all_profiles and all_groups
function read_all_profiles_and_groups
{
    all_profiles=()
    for p in "${!profile_@}" ; do
        all_profiles+=("${!p}")
    done

    all_groups=()
    for g in "${!group_@}" ; do
        all_groups+=("${g#group_}")
    done
}


# process arguments: set dry_run, cmd_args and profiles
# may exit
function process_args
{
    dry_run=0
    case "$1" in
        -l|--list)
            echo "${all_profiles[@]}"
            exit 0
            ;;
        -g|--groups)
            echo "${all_groups[@]}"
            exit 0
            ;;
        -d|--dry-run)
            dry_run=1
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
    esac

    cmd_args=()
    profiles=()
    bool_args=(
        -auto -batch -fat -group -owner -silent -terse -times -version
        -backups -addversionno -backups -confirmbigdel
        -confirmmerge -contactquietly -dontchmod -dumbtty
        -halfduplex -ignorearchives -ignoreinodenumbers -ignorelocks
        -killserver -log -numericids -rsync -selftest -showarchive
        -sortbysize -sortnewfirst -stream -xferbycopying)

    while (( $# > 0 )) ; do
        arg1="$1"
        arg2="$2"
        # arg1 is an option
        if [[ "${arg1:0:1}" == "-" ]] ; then
            is_boolean=1
            is_one_of "$arg1" "${bool_args[@]}" ||
            is_one_of "$arg1" "${bool_args[@]/%/=true}" ||
            is_one_of "$arg1" "${bool_args[@]/%/=false}" ||
            is_boolean=0
            if (( $is_boolean == 1 )) ; then
                shift
                cmd_args+=("$arg1")
            else
                shift 2
                if (( $? > 0 )) ; then
                    echo "One more argument expected"
                    exit 2
                fi
                cmd_args+=("$arg1" "$arg2")
            fi
        # arg1 is a profile
        else
            if is_one_of "$arg1" "${all_groups[@]}" ; then
                eval group_profiles='("${'group_${arg1}'[@]}")'
                # do not add duplicates
                for profile in "${group_profiles[@]}"; do
                    is_one_of "$profile" "${profiles[@]}"
                    if (( $? != 0 )) ; then
                        if is_one_of "$profile" "${all_profiles[@]}" ; then
                            profiles+=("$profile")
                        else
                            error "unknown profile: $profile"
                            exit 1
                        fi
                    fi
                done
            elif is_one_of "$arg1" "${all_profiles[@]}" ; then
                # do not add duplicates
                is_one_of "$arg1" "${profiles[@]}" ||
                profiles+=("$arg1")
            else
                error "unknown profile or group name: $arg1"
                exit 1
            fi
            shift
        fi
    done

    # no specified profiles means all profiles
    if (( "${#profiles[@]}" == "0" )) ; then
        profiles=("${all_profiles[@]}")
    fi

    info "profiles to sync: ${profiles[@]}"
}


# determine location: set location_index, cur_remote and cur_unison_dir
# exit on error
function determine_location
{
    location_found=0
    for i in "${!locations[@]}"; do
        if [[ "${locations[i]}" == "$location" ]] ; then
            location_index="$i"
            cur_remote="${remotes[$i]}"
            cur_unison_dir="${unison_dirs[$i]}"
            location_found=1
        fi
    done

    if (( "$location_found" == 0 )) ; then
        error "Can't determine your location: $location. "\
         "Known locations are: ${locations[@]}"
        exit 1
    else
        info "location: $location, unison_dir: $cur_unison_dir, remote: $cur_remote"
    fi
}


# get indexes of profiles: set prf_indexes and
# unisyncrc_index if such profile exists
function get_prf_indexes
{
    prf_indexes=()
    for profile in "${profiles[@]}" ; do
        for p in "${!profile_@}" ; do
            index="${p#profile_}"
            if [[ "$profile" == "${!p}" ]] ; then
                prf_indexes+=("$index")
                if [[ "$profile" == unisyncrc ]] ; then
                    unisyncrc_index="$index"
                fi
            fi
        done
    done
}


# run ssh to establish master connection when appropriate
# set ssh_master_pid
function maybe_run_ssh_master
{
    if [[ -n "$ssh_master" && $dry_run == 0 ]] ;  then
        ${ssh_master[@]} -S "$ssh_socket" "$cur_remote" &
        ssh_master_pid=$!
        # wait for socket control: ssh can ask password
        while true ; do
            if [[ -S "$ssh_socket" ]] ; then
                trap maybe_kill_ssh_master EXIT
                break
            elif kill -0 "$ssh_master_pid" 2>/dev/null ; then
                sleep 0.1
            else
                ssh_master_pid=
                error "master ssh exited accidentally"
                return 1
            fi
        done
    fi
}


first_print=1

# print profile (first arg) and status (second arg) to summary file or stdout
function print_summary
{
    if [[ "$first_print" == 1 ]] ; then
        first_print=0
        > "$summary"       # erase summary file
    fi
    if [[ "$summary" == "-" ]] ; then
        printf "%-14s %s\n" "$1" "$2"
    else
        printf "%-14s %s\n" "$1" "$2" >> "$summary"
    fi
}


# sync profile specified by index as the first argument
function sync_profile
{
    i="$1"
    profile_ref="profile_$i";
    profile="${!profile_ref}"

    # no way to achieve indirect expansion to array element, so use eval
    args_ref="args_$i";
    eval args='("${'$args_ref'[@]}")'

    locals_ref="local_$i"
    eval local_len='"${#'$locals_ref'[@]}"'
    if (( $local_len == 1 )) ; then
        local_index=0
    else
        local_index=$location_index
    fi
    eval local='"${'$locals_ref'['$local_index']}"'

    remotes_ref="remote_$i"
    eval remote_len='"${#'$remotes_ref'[@]}"'
    if (( $remote_len == 1 )) ; then
        remote_index=0
    else
        remote_index=$location_index
    fi
    eval remote='"${'$remotes_ref'['$remote_index']}"'
    remote="ssh://${cur_remote}/$remote"

    info "$profile: $local <---> $remote"
    if [ -f  "$cur_unison_dir/$profile.prf" ] ; then
        arg=("$profile")
    else
        arg=()
    fi
    if (( $dry_run == 1 )) ; then
        info dry-run: unison "${arg[@]}" "$local" "$remote" \
            "${unison_args[@]}" "${args[@]}" "${cmd_args[@]}"
    else
        unison "${arg[@]}" "$local" "$remote" \
            "${unison_args[@]}" "${args[@]}" "${cmd_args[@]}"
        status=$?
        if [[ -n "$summary" ]] ; then
            case $status in
                0) print_summary "$profile" "success";;
                1) print_summary "$profile" "some files skipped";;
                2) print_summary "$profile" "some failures";;
                3) print_summary "$profile" "fatal error";;
                *) print_summary "$profile" "unknown exit status $status";;
            esac
        fi
    fi
}


# sync profiles whose indexes are in prf_indexes
function sync_profiles
{
    for i in "${prf_indexes[@]}"; do
        sync_profile "$i"
    done
}


# release ssh master connection when appropriate
function maybe_kill_ssh_master
{
    if [[ -n $ssh_master_pid ]] ;  then
        kill $ssh_master_pid
    fi
    ssh_master_pid=
}


function main
{
    source_config
    erase_log    
    read_all_profiles_and_groups
    process_args "$@"
    determine_location
    get_prf_indexes
    maybe_run_ssh_master
    if [[ -n "$unisyncrc_index" ]] ; then
        sync_profile "$unisyncrc_index"
        ssh_master_old=("${ssh_master[@]}")
        unset_config
        source_config
        erase_log
        [[ "${ssh_master[@]}" != "${ssh_master_old[@]}" ]] && maybe_kill_ssh_master
        read_all_profiles_and_groups
        process_args "$@"
        determine_location
        get_prf_indexes
        [[ "${ssh_master[@]}" != "${ssh_master_old[@]}" ]] && maybe_run_ssh_master
    fi
    sync_profiles
    maybe_kill_ssh_master
}


main "$@"
